plugins {
    id 'application'
    id 'io.freefair.lombok'
    id "com.diffplug.spotless"
    id 'org.openjfx.javafxplugin'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
id "org.beryx.jlink"
}

version = '30.0.1'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.3.0-alpha13'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha13'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha7'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.0'

    // implementation ('org.controlsfx:controlsfx:11.1.2') {
    //     because 'text auto-completion for search field'
    // }

    implementation 'org.kordamp.ikonli:ikonli-materialdesign2-pack:12.3.1' // cheat-sheet here https://kordamp.org/ikonli/cheat-sheet-materialdesign2.html
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1' ) {
        because 'icons for buttons, controlsfx implementation is very limited'
    }

    implementation('com.github.eduardz1:custom_window:50747b0328') {
        because 'customization of Windows 11 window, no effect on other OS'
    }

    implementation project(':lib')
}

application {
    mainClass = 'jmail.client.Launcher'
    mainModule = 'jmail.client'
    applicationDefaultJvmArgs = [
        '--add-opens=javafx.controls/javafx.scene.control=ALL-UNNAMED',
        '--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED'
    ]
}

javafx {
    version = "19"
    modules = [
        "javafx.controls",
        "javafx.fxml",
    ]
}

import org.apache.tools.ant.taskdefs.condition.Os
jlink {
    addExtraDependencies("javafx")
//    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        noConsole = true
    }
    jpackage {
        def imgType = Os.isFamily(Os.FAMILY_WINDOWS) ? 'ico' : Os.isFamily(Os.FAMILY_MAC) ? 'icns' : 'png'
        
        imageOptions += ['--icon', "src/main/resources/icon.$imgType"]
        installerOptions += ['--resource-dir', "src/main/resources"]

        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
        else if (Os.isFamily(Os.FAMILY_UNIX)) {
            installerOptions += ['--linux-package-name', 'jmail-client','--linux-shortcut']
        }
        else if (Os.isFamily(Os.FAMILY_MAC)) {
            installerOptions += ['--mac-package-name', 'jmail-client']
        }
    }
}

spotless {
    ratchetFrom 'origin/main'

    java {
        importOrder() // Use the default importOrder configuration
        removeUnusedImports()
        googleJavaFormat()
        formatAnnotations()
    }

    groovyGradle {
        target '*.gradle', 'gradle/**/*.gradle'
        greclipse()
        indentWithSpaces()
    }

    format 'css', {
        target 'src/**/*.css'
        prettier()
    }

    format 'xml', {
        target 'src/**/*.xml', 'src/**/*.fxml'
        eclipseWtp('xml')
        indentWithSpaces()
    }
}

tasks.named('configJavafxRun').configure {
    notCompatibleWithConfigurationCache('issue tracked https://github.com/openjfx/javafx-gradle-plugin/issues/136')
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('compileJava').configure {
   notCompatibleWithConfigurationCache('')
}

tasks.named('createDelegatingModules').configure {
   notCompatibleWithConfigurationCache('')
}

tasks.named('createMergedModule').configure {
   notCompatibleWithConfigurationCache('')
}

tasks.named('jlink').configure {
   notCompatibleWithConfigurationCache('')
}

tasks.named('prepareMergedJarsDir').configure {
   notCompatibleWithConfigurationCache('')
}

tasks.named('prepareModulesDir').configure {
   notCompatibleWithConfigurationCache('')
}

tasks.named('startScripts').configure {
   notCompatibleWithConfigurationCache('')
}

tasks.named('jlinkZip').configure {
   notCompatibleWithConfigurationCache('')
}
